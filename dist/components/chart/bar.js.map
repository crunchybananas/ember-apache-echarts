{"version":3,"file":"bar.js","sources":["../../../src/components/chart/bar.gts"],"sourcesContent":["import { template as template_619ac55cfa8248f2965c5fbf8e49c2f4 } from \"@ember/template-compiler\";\nimport { action } from '@ember/object';\nimport { htmlSafe } from '@ember/template';\nimport { or } from 'ember-truth-helpers';\n// @ts-expect-error\nimport { pick } from 'lodash-es';\nimport { tracked } from '@glimmer/tracking';\nimport barChart from '../../modifiers/bar-chart.ts';\nimport Component from '@glimmer/component';\nimport cssSize from '../../helpers/css-size.ts';\nimport setupChart from '../../modifiers/setup-chart.ts';\nimport style from 'ember-style-modifier';\n/**\n * Converts an EChart tooltip param into a standardized & simplied object this\n * component can yield to custom tooltip components.\n *\n * The object returned from this function includes the following properties:\n *\n * `label`\n * : The label on the category axis for the item.\n *\n * `value`\n * : The value on the value axis for the item, formatted using the\n *   `valueAxisFormatter` provided to the bar chart, if any.\n *\n * `category`\n * : The category on the category axis for the item, formatted using the\n *   `categoryAxisFormatter` provided to the bar chart, if any.\n *\n * `marker`\n * : Raw HTML that renders the marker used to identify the item on the chart.\n *\n * `style`\n * : An object representing the graphical properties of the element being\n *   hovered over. Currently only supports `color`.\n *\n * `dataIndex`\n * : The index of the item in the data for the series this item belongs to.\n *\n * `data`\n * : The data object from the chart data for this item.\n *\n * `seriesIndex`\n * : The index in the dataset of the series this item belongs to.\n *\n * `series`\n * : The series object for the series this item belongs to.\n */ // @ts-expect-error\nconst toTooltipItem = (param, dataset)=>({\n        ...pick(param, 'value', 'marker', 'dataIndex', 'data', 'seriesIndex'),\n        label: param.name,\n        style: pick(param, 'color'),\n        series: {\n            label: param.seriesName,\n            ...dataset[param.seriesIndex]\n        }\n    });\ntype ToolTipAxis = {\n    id: string;\n    index: number;\n    type: string;\n    value: number;\n    valueLabel: string;\n    dimension: string;\n};\n/**\n * Converts an axis EChart tooltip param into an object describing the axis the\n * tooltip is for.\n */ // @ts-expect-error\nconst toTooltipAxis = ([firstParam])=>({\n        id: firstParam.axisId,\n        index: firstParam.axisIndex,\n        type: firstParam.axisType,\n        value: firstParam.axisValue,\n        valueLabel: firstParam.axisValueLabel,\n        dimension: firstParam.axisDim\n    });\ninterface S {\n    Args: {\n        width?: string | number;\n        height?: string | number;\n        series?: unknown[];\n        data?: unknown;\n        variant?: string;\n        title?: string;\n        rotateData?: boolean;\n        categoryProperty?: string;\n        valueProperty?: string;\n        chartStyle?: unknown;\n        chartTitleStyle?: unknown;\n        maxColumns?: number;\n        orientation?: 'horizontal' | 'vertical';\n        colorMap?: unknown;\n        cellStyle?: unknown;\n        cellTitleStyle?: unknown;\n        cellTextOverlayStyle?: unknown;\n        plotStyle?: unknown;\n        categoryAxisScale?: unknown;\n        valueAxisScale?: unknown;\n        categoryAxisFormatter?: unknown;\n        valueAxisFormatter?: unknown;\n        categoryAxisSort?: string;\n        categoryAxisMaxLabelCount?: number;\n        valueAxisMax?: number;\n        xAxisFormatter?: unknown;\n        yAxisFormatter?: unknown;\n        xAxisStyle?: unknown;\n        yAxisStyle?: unknown;\n        xAxisPointer?: string;\n        yAxisPointer?: string;\n        xAxisPointerLabel?: string;\n        yAxisPointerLabel?: string;\n        xAxisPointerStyle?: unknown;\n        yAxisPointerStyle?: unknown;\n        xAxisPointerLabelStyle?: unknown;\n        yAxisPointerLabelStyle?: unknown;\n        xAxisTooltip?: unknown;\n        yAxisTooltip?: unknown;\n        xAxisZoom?: string;\n        yAxisZoom?: string;\n        xAxisZoomBrush?: boolean;\n        yAxisZoomBrush?: boolean;\n        xAxisZoomStyle?: unknown;\n        yAxisZoomStyle?: unknown;\n        legend?: string;\n        legendOrientation?: string;\n        legendStyle?: unknown;\n        drillUpButtonStyle?: unknown;\n        drillUpButtonText?: string;\n        onSelect?: (item: unknown) => void;\n    };\n    Element: HTMLDivElement;\n    Blocks: {\n        axisTooltip: [ToolTipAxis, unknown[]];\n        itemTooltip: [unknown];\n    };\n}\nexport default class BarChartComponent extends Component<S> {\n    // @ts-expect-error\n    axisTooltipElement;\n    // @ts-expect-error\n    itemTooltipElement;\n    // @ts-expect-error\n    @tracked\n    tooltipItem;\n    // @ts-expect-error\n    @tracked\n    tooltipItems;\n    // @ts-expect-error\n    @tracked\n    tooltipAxis;\n    // HACK: The way we're currently transforming the data for the grouped or\n    //       stacked layout is causing Apache eCharts to swap the item label with\n    //       the series label. This ensures that by default the tooltip is\n    //       rendered correctly. [twl 30.Nov.22]\n    get useDefaultGroupedOrStackedTooltip() {\n        const { variant } = this.args;\n        return variant && (variant.startsWith('group') || variant.startsWith('stacked'));\n    }\n    @action\n    setup(element: HTMLElement) {\n        this.axisTooltipElement = element.querySelector('[data-role=axisTooltip]');\n        this.itemTooltipElement = element.querySelector('[data-role=itemTooltip]');\n    }\n    @action\n    // @ts-expect-error\n    tooltipFormatter(params, dataset) {\n        if (params.length) {\n            this.tooltipAxis = toTooltipAxis(params);\n            // @ts-expect-error\n            this.tooltipItems = params.map((param)=>toTooltipItem(param, dataset));\n            return this.axisTooltipElement;\n        } else {\n            this.tooltipItem = toTooltipItem(params, dataset);\n            return this.itemTooltipElement;\n        }\n    }\n    static{\n        template_619ac55cfa8248f2965c5fbf8e49c2f4(`\n    <div {{setupChart this.setup}} {{style width=\"100%\" height=\"100%\"}}>\n      <div\n        ...attributes\n        {{style width=(cssSize @width \"100%\") height=(cssSize @height \"400\")}}\n        {{! @glint-expect-error}}\n        {{barChart\n          this.args\n          tooltipFormatter=(if\n            (or (has-block \"itemTooltip\") this.useDefaultGroupedOrStackedTooltip)\n            this.tooltipFormatter\n          )\n        }}\n      ></div>\n\n      {{#if (has-block \"itemTooltip\")}}\n        <div data-role=\"itemTooltip\" style={{htmlSafe (if this.tooltipItem \"\" \"display: none\")}}>\n          {{yield this.tooltipItem to=\"itemTooltip\"}}\n        </div>\n      {{else if this.useDefaultGroupedOrStackedTooltip}}\n        <div data-role=\"itemTooltip\" style={{htmlSafe (if this.tooltipItem \"\" \"display: none\")}}>\n          {{! template-lint-disable no-triple-curlies }}\n          {{{this.tooltipItem.marker}}}\n          {{this.tooltipItem.series.label}}:\n          {{this.tooltipItem.value}}\n        </div>\n      {{/if}}\n\n      {{#if (has-block \"axisTooltip\")}}\n        <div data-role=\"axisTooltip\" style={{htmlSafe (if this.tooltipItems \"\" \"display: none\")}}>\n          {{yield this.tooltipItems this.tooltipAxis to=\"axisTooltip\"}}\n        </div>\n      {{/if}}\n    </div>\n  `, {\n            component: this,\n            eval () {\n                return eval(arguments[0]);\n            }\n        });\n    }\n}\n//# sourceMappingURL=data:application/json;base64,"],"names":["toTooltipItem","param","dataset","pick","label","name","style","series","seriesName","seriesIndex","toTooltipAxis","firstParam","id","axisId","index","axisIndex","type","axisType","value","axisValue","valueLabel","axisValueLabel","dimension","axisDim","BarChartComponent","Component","axisTooltipElement","itemTooltipElement","g","prototype","tracked","i","void 0","useDefaultGroupedOrStackedTooltip","variant","args","startsWith","setup","element","querySelector","n","action","tooltipFormatter","params","length","tooltipAxis","tooltipItems","map","tooltipItem","setComponentTemplate","precompileTemplate","strictMode","scope","setupChart","cssSize","barChart","or","htmlSafe"],"mappings":"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"}