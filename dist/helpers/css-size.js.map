{"version":3,"file":"css-size.js","sources":["../../src/helpers/css-size.ts"],"sourcesContent":["import { helper } from '@ember/component/helper';\n\nconst numberRegEx = /^\\d+$/;\n\nconst isNumeric = (value?: string | number) =>\n  typeof value === 'number' || (typeof value === 'string' && value.match(numberRegEx) != null);\n\n/**\n * Formats a value so it can be used as a size in CSS expressions. Automatically\n * uses `px` as the unit for nummeric values.\n *\n * @param {array} positional - The positional parameters for this function\n * @param {string|number} positional[0] - The value to format as a CSS size\n * @param {string|number} positional[1] - The default value if the value is null\n *                                        or undefined\n *\n * @return {string} The value formatted as a CSS size\n */\n\nexport default helper(function cssSize(positional: [(string | number)?, (string | number)?] /*, named*/): string {\n  const size = positional[0] != null && positional[0] !== '' ? positional[0] : positional[1];\n\n  return isNumeric(size) || size === ''\n    ? size?.toString() !== '0'\n      ? `${size}px`\n      : '0'\n    : (`${size ?? '0'}`);\n});\n"],"names":["numberRegEx","isNumeric","value","match","helper","cssSize","positional","size","toString"],"mappings":";;AAEA,MAAMA,WAAW,GAAG,OAAO,CAAA;AAE3B,MAAMC,SAAS,GAAIC,KAAuB,IACxC,OAAOA,KAAK,KAAK,QAAQ,IAAK,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACC,KAAK,CAACH,WAAW,CAAC,IAAI,IAAK,CAAA;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAeI,MAAM,CAAC,SAASC,OAAOA,CAACC,UAAoD,EAAsB;EAC/G,MAAMC,IAAI,GAAGD,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE,GAAGA,UAAU,CAAC,CAAC,CAAC,GAAGA,UAAU,CAAC,CAAC,CAAC,CAAA;EAE1F,OAAOL,SAAS,CAACM,IAAI,CAAC,IAAIA,IAAI,KAAK,EAAE,GACjCA,IAAI,EAAEC,QAAQ,EAAE,KAAK,GAAG,GACtB,CAAGD,EAAAA,IAAI,CAAI,EAAA,CAAA,GACX,GAAG,GACJ,CAAGA,EAAAA,IAAI,IAAI,GAAG,CAAG,CAAA,CAAA;AACxB,CAAC,CAAC;;;;"}