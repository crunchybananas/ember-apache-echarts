{"version":3,"file":"layout-cells.js","sources":["../../../src/utils/layout/layout-cells.ts"],"sourcesContent":["// @ts-expect-error: remove lodash\nimport { pickBy } from 'lodash-es';\nimport resolveStyle from '../style/resolve-style.ts';\n\n/**\n * Computes layout information about the chart.\n *\n * @param {object}   context An object describing the layout context (size &\n *                           args) for the chart\n * @param {object[]} array   An array of objects for each plot\n *\n * @return {object} An object containing the chart layout info\n */\n// @ts-expect-error: not sure\nfunction computeChartLayoutInfo(context, array) {\n  const { maxColumns } = context.args;\n  const cellCount = array.length;\n  const columns = maxColumns ? Math.min(cellCount, maxColumns) : cellCount;\n  const rows = Math.ceil(cellCount / columns);\n\n  return {\n    width: context.layout.width,\n    height: context.layout.height,\n    rows,\n    columns,\n  };\n}\n\n/**\n * Computes information about individual cells within the chart when laying out\n * multiple plots within a chart.\n *\n * @param {object} context An object describing the layout context (styles) for\n *                         the chart\n * @param {object} chart   The chart layout info\n *\n * @return {object} An object containing the cell layout info\n */\n// @ts-expect-error: not sure\nfunction computeCellLayoutInfo(context, chart) {\n  const xOffset = context.layout.cell?.xOffset ?? 0;\n  const yOffset = context.layout.cell?.yOffset ?? 0;\n\n  // Includes margin, border and padding\n  let layoutSize = {\n    width: chart.width / chart.columns - xOffset,\n    height: chart.height / chart.rows - yOffset,\n  };\n\n  const cell = {\n    xOffset,\n    yOffset,\n    ...layoutSize,\n    ...resolveStyle(context.styles.cell, layoutSize),\n  };\n\n  // Includes only padding now\n  layoutSize = {\n    width:\n      layoutSize.width -\n      cell.marginLeft -\n      cell.marginRight -\n      cell.borderLeftWidth -\n      cell.borderRightWidth,\n    height:\n      layoutSize.height -\n      cell.marginTop -\n      cell.marginBottom -\n      cell.borderTopWidth -\n      cell.borderBottomWidth,\n  };\n\n  Object.assign(\n    cell,\n    pickBy(resolveStyle(context.styles.cell, layoutSize), (_value: unknown, key: string) =>\n      key.startsWith('padding')\n    )\n  );\n\n  // Store the dimensions inside of the padding\n  cell.innerWidth = layoutSize.width - cell.paddingLeft - cell.paddingRight;\n  cell.innerHeight = layoutSize.height - cell.paddingTop - cell.paddingBottom;\n\n  return cell;\n}\n\n/**\n * Computes information about the chart and individual cells within the chart\n * when laying out multiple plots within a chart.\n *\n * @param {object}   context An object describing the layout context (size, args\n *                           and styles) for the chart\n * @param {object[]} array   An array of configuration objects for each plot\n *\n * @return {object} An object containing `chart` and `cell` keys which provide\n *                  layout information for these aspects of the layout\n */\n// @ts-expect-error: not sure\nfunction computeLayoutInfo(context, array) {\n  const chart = computeChartLayoutInfo(context, array);\n  const cell = computeCellLayoutInfo(context, chart);\n\n  return {\n    chart,\n    cell,\n  };\n}\n\n/**\n * Maps an array of data elements to an array of chart configurations suitable\n * for layout out plots and other data-related elements.\n *\n * The `callback`is called for each element in `array` with\n * `(element, cellInfo, chartInfo, array)` where:\n *\n * `element`\n * : The array element being laid out\n *\n * `chartInfo`\n * : Includes `width`, `height`, `rows` and `columns`\n *\n * `cellInfo`\n * : Includes `width` and `height` of the cell including margin, borders and\n *   padding; `innerWidth` and `innerHeight` of the cell excluding margin,\n *   borders and padding; `x` and `y` location of the cell on the chart,\n *   `row`, `column` and `index` of the cell; and any style information for the\n *   cell (e.g., `marginTop`, `fontFamily`, etc)\n *\n * `array`\n * : The array itself\n *\n * @param {object}   context  The context within which the cells are being laid\n *                            out\n * @param {object[]} array    An array of the data elements being lait out\n * @param {Function} callback The function used to generate the configuration\n *                            for the data element\n *\n * @return {object[]} An array of chart configuration elements\n */\n// @ts-expect-error: not sure\nexport default function layoutCells(context, array, callback) {\n  const layoutInfo = computeLayoutInfo(context, array);\n  // @ts-expect-error: not sure\n  return array.map((element, index) => {\n    const column = index % layoutInfo.chart.columns;\n    const row = Math.floor(index / layoutInfo.chart.columns);\n    const yOffset = layoutInfo.cell.yOffset ?? 0;\n    const x = context.layout.x + layoutInfo.cell.width * column;\n    const y = context.layout.y + (layoutInfo.cell.height + yOffset) * row;\n\n    return callback(\n      element,\n      {\n        ...layoutInfo.cell,\n        row,\n        column,\n        index,\n        x,\n        y,\n        innerX:\n          x +\n          layoutInfo.cell.marginLeft +\n          layoutInfo.cell.borderLeftWidth +\n          layoutInfo.cell.paddingLeft,\n        innerY:\n          y +\n          layoutInfo.cell.marginTop +\n          layoutInfo.cell.borderTopWidth +\n          layoutInfo.cell.paddingTop +\n          yOffset,\n      },\n      layoutInfo.chart,\n      array\n    );\n  });\n}\n"],"names":["computeChartLayoutInfo","context","array","maxColumns","args","cellCount","length","columns","Math","min","rows","ceil","width","layout","height","computeCellLayoutInfo","chart","xOffset","cell","yOffset","layoutSize","resolveStyle","styles","marginLeft","marginRight","borderLeftWidth","borderRightWidth","marginTop","marginBottom","borderTopWidth","borderBottomWidth","Object","assign","pickBy","_value","key","startsWith","innerWidth","paddingLeft","paddingRight","innerHeight","paddingTop","paddingBottom","computeLayoutInfo","layoutCells","callback","layoutInfo","map","element","index","column","row","floor","x","y","innerX","innerY"],"mappings":"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"}